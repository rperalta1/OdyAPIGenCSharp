Building the Shared Libraries from Command Line Interface
=========================================================

Pre-requisites
--------------
Visual Studio 2017 and .NET Framework Version 4.7.2 must be installed before you execute the next procedure.

Install procedure
-----------------

1) Odyssey API XSD files are stored in your Integration server in two places: Production and CustomExtensions. 
   Copy Production XSD files into "C:\tmp\Production\" and CustomExtensions XSD files into 
   "C:\tmp\CustomExtensions\". Also copy file src\main\resources\errorstream.xsd (included in this project) to
   these two folders. 
   
2) Building and Using the Prod shared library
   
   2.1) Configure App.Config files
   
   Open file App.Config located OdyAPIGenBuilder\resources\production and update the following parameters:
   
      - Key "apiWsdl" (line 10) must hold URL of your Tyler's Odyssey API web service definition
	  - Key "ixmlWsdl" (line 12) must hold URL of your Tyler's Odyssey IXML web service definition
	  - Key "xsdExePath" (line 15) must hold the file path to the .NET Framework "xsd.exe" tool.
	  - Key "wsdlExePath" (line16) must hold the file path to the .NET Framework "wsdl.exe" tool.
   Save the App.Config file
   
   2.2) Building the Prod shared library

   From a command line interface (CMD.EXE) go to directory of the project directory 
   (i.e. C:\Users\xxxxx\source\repos\OdyAPIGeneratorCSharp) and execute the following to command to generate 
   the Prod shared Libraries:
   
       msbuild builder.csproj -t:prod
   
   The builder.csproj script located inside the project directory will execute two projects: OdyApiGenBuilder 
   and OdyApiGenLibrary. The resulting shared libraries (.dll file) will be placed inside 
   OdyAPIGeneratorCSharp\OdyAPIGenLibrary\bin\Debug and they will also be  copy to 
   OdyAPIGeneratorCSharp\OdyAPIGenExample\lib  directory.

   Note
   ----
    - Ignore warnings generated by the "xsd.exe" tool when it tries to generate classes for XSD files that hold 
	  only data types. 

   2.3) Using the Prod shared libraries
   
   Examples for demonstrating how to use the Prod libraries are included in this project. To run them, from the 
   command line, execute on OdyAPIGeneratorCSharp direcotory the following command:
   
      msbuild builder.csproj -t:run-example

3) Building Custom shared libraries

   3.1) Configure App.Config files
   
   Open file App.Config located OdyAPIGenBuilder\resources\custom and update the parameters described in step 2.1.
   
   3.2) Building the Custom shared libraries

   From a command line interface (CMD.EXE) on the project directory run the following to command to generate the 
   Custom shared Libraries:
   
       msbuild builder.csproj -t:custom
   
   Like in step 2.2 shared libraries (.dll file) will be located on OdyAPIGeneratorCSharp\OdyAPIGenLibrary\bin\Debug.

   Note
   ----
     - This project does not have an example project for testing the Custom shared libraries however follow the logic
	   used on the Prod shared library to implement one. 

Final Notes
-----------
   - The shared libraries generated by this procedure in the OdyAPIGeneratorCSharp\OdyAPIGenLibrary\bin\Debug folder
     can be copied to other projects and do not forget to include it among the "References" of the project. 
   - To setup the OdyApiGenExample parameters open OdyAPIGeneratorCSharp\OdyAPIGenLibrary\ExampleAPIs.cs file and edit
     lines 41-47. You must provide the Odyssey API wsdl URL, the Odyssey site id, the user id -- a number associated 
	 to the user account that is running the program (user ids can be found on Operations.dbo.AppUser table of your
	 Odyssey DB), and a valid Odyssey case number that has at least one case event linked to a pdf document. 

--- END 